plugins {
    id 'com.github.ben-manes.versions' version '0.17.0'
    id "com.github.kt3k.coveralls" version '2.8.2'
}

task testReport(type: TestReport, group: 'Build') {
    description 'Generates an aggregate test report.'
    destinationDir file("${buildDir}/reports/allTests")
}

subprojects {

    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'maven'
    apply plugin: 'signing'
    apply plugin: 'com.github.ben-manes.versions'
    apply plugin: 'com.github.kt3k.coveralls'
    apply plugin: 'jacoco'
    apply plugin: 'checkstyle'

    group = 'com.github.elopteryx'
    version = '1.0.0-SNAPSHOT'

    repositories {
        mavenCentral()
        mavenLocal()
    }

    ext {
        jmhVersion = '1.20'
        junitVersion = '5.1.0'
    }

    tasks.withType(JavaCompile) {
        sourceCompatibility = 10
        targetCompatibility = 10
    }

    task javadocJar(type: Jar) {
        classifier 'javadoc'
        from javadoc
    }

    javadoc {
        afterEvaluate {
            configure(options) {
                windowTitle 'Bean Mirror API Documentation'
                docTitle 'Bean Mirror API Documentation'
                bottom 'Copyright &#169; 2018 <a href="https://github.com/Elopteryx">Creative Elopteryx</a>'
                breakIterator true
                author false
                source '10'
                encoding 'UTF-8'
                docEncoding 'UTF-8'
                failOnError true
                links = [
                        'http://download.oracle.com/javase/10/docs/api/'
                ]
            }
        }
    }

    task sourcesJar(type: Jar) {
        classifier 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives jar
    }

    jacoco {
        toolVersion '0.8.1'
    }

    checkstyle {
        toolVersion '8.8'
        configFile = new File("${project.rootDir}/config/checkstyle/checkstyle.xml")
    }

    signing {
        required { !version.endsWith('SNAPSHOT') && gradle.taskGraph.hasTask('uploadArchives') }
        sign configurations.archives
    }

    test {
        useJUnitPlatform()
        testLogging.showStandardStreams = true
    }

    tasks.withType(Test) {
        rootProject.testReport.reportOn it
        jacoco {
            append true
            destinationFile file("${rootDir}/build/jacoco/jacocoTest.exec")
            classDumpDir file("${rootDir}/build/jacoco/classpathdumps")
        }
    }
}

repositories {
    jcenter()
}

task jacocoRootReport(type: JacocoReport, group: "Coverage reports") {
    description "Generates an aggregate report from all subprojects"
    dependsOn(subprojects.test)

    additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)

    reports {
        html.enabled true
        xml.enabled true
    }

    doFirst {
        executionData = files(executionData.findAll { it.exists() })
    }
}

coveralls {
    sourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

tasks.coveralls {
    group "Coverage reports"
    description "Uploads the aggregated coverage report to Coveralls."

    dependsOn jacocoRootReport
    onlyIf { System.env."CI" }
}
